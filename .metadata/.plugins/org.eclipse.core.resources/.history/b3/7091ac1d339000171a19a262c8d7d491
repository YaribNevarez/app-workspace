/*
 * systool.cpp
 *
 *  Created on: Aug 30, 2017
 *      Author: root
 */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include "systool.hpp"
#include "framework/zybo.hpp"

SystemTool::SystemTool()
{
	server = new ServerFeature(&ZYNQ_PMOD_HANDLER);
	register_feature((SystemFeature *) server);
}

int SystemTool::ServerFeature::connect_server(void)
{
	int addr_len;
	int result = EXIT_FAILURE;

	if (server_socket != -1)
	{
		listen(server_socket , 1);

		printf("Waiting for connection ...");
		addr_len = sizeof(struct sockaddr_in);

		client_socket = accept(server_socket,
							  (struct sockaddr *) &client_address,
							  (socklen_t*)&addr_len);

		if (client_socket != -1)
		{
			printf("Connection established.\n");
			result = EXIT_SUCCESS;
		}
		else
		{
			perror("connection - Error");
		}
	}

	return result;
}

int SystemTool::ServerFeature::prepare_server(uint16_t host)
{
	int result = EXIT_FAILURE;

    server_socket = socket(AF_INET , SOCK_STREAM , 0);

    if (server_socket != -1)
    {
		printf("Socket created\n");

		server_address.sin_family = AF_INET;
		server_address.sin_addr.s_addr = INADDR_ANY;
		server_address.sin_port = htons(host);

		if(bind(server_socket, (struct sockaddr *)&server_address, sizeof(server_address)) == 0)
		{
			result = EXIT_SUCCESS;
		}
		else
		{
			perror("bind - Error");
		}
    }
    else
    {
    	perror("socket - Error");
    }

    return result;
}

void SystemTool::ServerFeature::close_connection(void)
{
	if (server_socket != -1)
		close(server_socket);

	if (client_socket != -1)
		close(client_socket);
}

int SystemTool::ServerFeature::run(void)
{
	char client_message[2000];
	int read_size;
	int result;

	result = prepare_server(7777);

	if (result == EXIT_SUCCESS)
	{
		result = connect_server();
	}


	if (result == EXIT_SUCCESS)
	{
		printf("waiting for data.\n");

		while((read_size = recv(client_socket , client_message , sizeof(client_message) , 0)) > 0 )
		{
			if (strncmp(client_message, "Relay1=", 7) == 0)
			{
				relay_0.set_status(client_message[7] == '1' ? OutputPin::ON : OutputPin::OFF);
			}
			else if (strncmp(client_message, "Relay2=", 7) == 0)
			{
				relay_1.set_status(client_message[7] == '1' ? OutputPin::ON : OutputPin::OFF);
			}
			else if (strncmp(client_message, "EXIT", 4) == 0)
			{
				puts("Client disconnected");
				break;
			}

			puts(client_message);
			write(client_socket , client_message , strlen(client_message));
			memset(client_message, 0, sizeof(client_message));
		}



		if(read_size == -1)
		{
			perror("receiving data - Error");
		}
	}

    return result;
}

int SystemTool::run(void)
{
	start();

	for (;;);
    return 0;
}

SystemTool::~SystemTool()
{
}
