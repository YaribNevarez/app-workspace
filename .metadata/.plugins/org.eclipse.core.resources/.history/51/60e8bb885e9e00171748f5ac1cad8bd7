/*
 * cccapp.cpp
 *
 *  Created on: Aug 7, 2017
 *      Author: Yarib Nev√°rez (yarib_007@hotmail.com) - root
 */
#include <stdio.h>
#include <unistd.h>
#include <iostream>
#include "ctrlapp.hpp"
#include "framework/systembox.hpp"
#include "framework/daemon.hpp"
#include "framework/commander.hpp"
#include "framework/tcpserver.hpp"

using namespace SYSTEMBOX;

ControlApp::ControlApp(int argc, char * argv[]):
Application(argc, argv)
{
	if (0 < passed_arg("-drain"))
		register_thread(new DrainFlushFeature());

	if (0 < passed_arg("-ir"))
		register_thread(new IRFeature());

	if (0 < passed_arg("-leakage"))
		register_thread(new LeakageFeature());

	if (0 < passed_arg("-server"))
		register_thread(new ServerFeature());
}

int ControlApp::IRFeature::run(void)
{
	typedef enum
	{
		IR_MODE = 0,
		EMERGENCY,
		SOV_OPEN
	} ESwitchState;

	ESwitchState status;
	const unsigned int ABSENCE_TIMEOUT = 60;
	unsigned int timer = 0;

	for (;;)
	{
		status = (ESwitchState) emergencySwitch.get_value();
		switch(status)
		{
		case IR_MODE:
			switch (irSensor.get_status())
			{
			case IRSensor::PRESENCE:
				shutOffValve.set_position(Valve::OPEN);
				timer = ABSENCE_TIMEOUT;
				break;
			case IRSensor::ABSENCE:
				if (timer == 0)
				{
					shutOffValve.set_position(Valve::CLOSE);
				}
				else
				{
					shutOffValve.set_position(Valve::OPEN);
					sleep(1);
					timer --;
				}
				break;
			default:;
			}
			break;
		case EMERGENCY:
			shutOffValve.set_position(Valve::CLOSE);
			timer = 0;
			break;
		case SOV_OPEN:
			shutOffValve.set_position(Valve::OPEN);
			timer = 0;
			break;
		default:;
			timer = 0;
		}
	}
	return 0;
}

int ControlApp::LeakageFeature::run(void)
{
	for (;;)
	{
		if (LeakageSensor::LEAKING == leakageSensor_0.get_status()
		 || LeakageSensor::LEAKING == leakageSensor_1.get_status())
		{
			leakageIndicator.set_status(OutputPin::ON);
		}
		else
		{
			leakageIndicator.set_status(OutputPin::OFF);
		}
	}
	return 0;
}

int ControlApp::ServerFeature::run(void)
{
	TcpServer * server;
	TcpSocket * client;
	std::string message;
	std::string answer;
	bool exit_flag;

	server = new TcpServer(23);
	if (server != NULL)
	{
		if (server->prepare() != -1)
		{
			for (;;)
			{
				client = server->accept_connection(); // Waiting for connection

				if (client != NULL)
				{
					do
					{
						if (client->receive_buffer(message) > 0)
						{
							exit_flag = Commander::execute(message, answer);
							client->send_buffer(answer);
						}
						else
						{
							exit_flag = true;
						}
					}
					while(!exit_flag);

					delete client;
				}
			}
		}
		delete server;
	}

	perror("\nExit");
	return 0;
}

int ControlApp::run(void)
{
	if (0 < passed_arg("-daemon"))
	{
		Daemon::become(0);
	}

	start(); // start all registered worker threads

	for (;;);

	return 0;
}

ControlApp::~ControlApp()
{}
