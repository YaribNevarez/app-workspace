/*
 * tread.hpp
 *
 *  Created on: Aug 29, 2017
 *      Author: root
 */

#ifndef TREAD_HPP_
#define TREAD_HPP_

#include <pthread.h>
#include <errno.h>
#include <stdlib.h>

class Runnable
{
public:
	virtual int run() = 0;
};

class Thread
{
public:
	Thread(Runnable * obj = NULL):
	thread(0),
	obj(obj)
	{}

	virtual ~Thread()
	{}

	virtual int start(void)
	{
		return pthread_create(&thread, NULL, process_trigger, obj);
	}

	virtual int start(Runnable * obj)
	{
		Thread::obj = obj;
		return start();
	}

	virtual int quit()
	{
		int result = -1;
		if (flags & RUNNING)
		{
			pthread_cancel(thread);
			pthread_join(thread, (void **)&result);

			if (result == (int)PTHREAD_CANCELED)
			{
				result = EXIT_SUCCESS;
			}
		}
		return result;
	}

	virtual bool isRunning(void)
	{
		int result = -1;
		pthread_tryjoin_np(thread, (void **)&result);
		return flags & RUNNING;
	}

private:

	static void * process_trigger(void * obj)
	{
		if (obj != NULL)
			((Runnable *) obj)->run();
		return NULL;
	}
	pthread_t	thread;
	Runnable *	obj;
};

#endif /* TREAD_HPP_ */
