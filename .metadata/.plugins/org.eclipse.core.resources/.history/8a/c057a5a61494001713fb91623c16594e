/*
 * tcpsocket.cpp
 *
 *  Created on: Sep 7, 2017
 *      Author: root
 */

#include "tcpsocket.hpp"

TcpSocket::TcpSocket(void):
client_socket(-1),
buffer_length(DEFAULT_BUFFER_LENGTH)
{
	memset(&server_address, 0, sizeof(server_address));
	memset(&client_address, 0, sizeof(client_address));
}

TcpSocket::TcpSocket(int client_socket, struct sockaddr_in client_address)
{
	TcpSocket::client_socket = client_socket;
	TcpSocket::client_address = client_address;
}

TcpSocket::~TcpSocket(void)
{
	close_connection();
}


int TcpSocket::open_connection(char * host_address, uint16_t port)
{
	int result = -1;
	client_socket = socket(AF_INET , SOCK_STREAM , 0);

	if (client_socket != -1)
	{
		server_address.sin_addr.s_addr = inet_addr(host_address);
		server_address.sin_family = AF_INET;
		server_address.sin_port = htons(port);

		result = connect(client_socket,
						(const struct sockaddr *) &server_address,
						 sizeof(server_address));
	}

	return result;
}

void TcpSocket::close_connection(void)
{
}

int TcpSocket::receive_buffer(void *, size_t)
{
}

int TcpSocket::receive_buffer(std::string &)
{
}

int TcpSocket::receive_buffer(ByteVector &)
{
}

int TcpSocket::send_buffer(void *, size_t)
{
}

int TcpSocket::send_buffer(const char *)
{
}

int TcpSocket::send_buffer(std::string &)
{
}

int TcpSocket::send_buffer(ByteVector &)
{
}


void TcpSocket::set_buffer_length(size_t)
{
}

size_t TcpSocket::get_buffer_length()
{
}
