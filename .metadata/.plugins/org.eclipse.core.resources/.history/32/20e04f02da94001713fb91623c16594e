/*
 * systool.cpp
 *
 *  Created on: Aug 30, 2017
 *      Author: Yarib Nev√°rez (yarib_007@hotmail.com) - root
 */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <typeinfo>
#include "systool.hpp"
#include "framework/commander.hpp"
#include "framework/systembox.hpp"

using namespace SYSTEMBOX;

SystemTool::SystemTool()
{
}

void remote_commander(uint16_t server_port)
{
	TcpServer * server;
	TcpSocket * client;
	std::string message;
	std::string answer;
	bool exit_flag;

	server = new TcpServer(server_port);
	if (server != NULL)
	{
		if (server->prepare() != -1)
		for (;;)
		{
			puts("\nWaiting for connection ...");
			client = server->accept_connection();

			if (client != NULL)
			{
				do
				{
					if (client->receive_buffer(message) > 0)
					{
						printf("\nClient: %s", message.c_str());
						exit_flag = Commander::execute(message, answer);
						printf("\nServer: %s", answer.c_str());
						client->send_buffer(answer);
					}
					else
					{
						exit_flag = true;
					}
				} while(!exit_flag);

				delete client;
			}
		}
		delete server;
	}

	perror("\nError");
}

void local_commander(void)
{
}

int SystemTool::run(void)
{
	char op;
	puts("\n***** Welcome to the local SysTool *****");
	puts("\n\nOptions:");
	puts("\n 1   - Start command server");
	puts("\n 2   - Start command local");
	puts("\n ESC - Exit");
	puts("\n\nSelect: ");

	op = std::cin.get();

	switch(op)
	{
	case '1': break;
	case '2': break;
	default:;
	}

	printf("Bye\n");
    return 0;
}

SystemTool::~SystemTool()
{
}
