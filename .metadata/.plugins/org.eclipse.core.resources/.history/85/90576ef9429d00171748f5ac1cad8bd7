/*
 * systool.cpp
 *
 *  Created on: Aug 30, 2017
 *      Author: Yarib Nev√°rez (yarib_007@hotmail.com) - root
 */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string>
#include <typeinfo>
#include "systool.hpp"
#include "framework/commander.hpp"
#include "framework/systembox.hpp"
#include <signal.h>
#include <time.h>
#include <sys/ioctl.h>
#include <linux/joystick.h>

using namespace SYSTEMBOX;

SystemTool::SystemTool(int argc, char * argv[]):
Application(argc, argv)
{
}

void SystemTool::remote_commander(uint16_t server_port)
{
	TcpServer * server;
	TcpSocket * client;
	std::string message;
	std::string answer;
	bool exit_flag;

	server = new TcpServer(server_port);
	if (server != NULL)
	{
		if (server->prepare() != -1)
		for (;;)
		{
			std::cout << "\nWaiting for connection on server port: " << server_port << std::endl;
			client = server->accept_connection();

			if (client != NULL)
			{
				do
				{
					if (client->receive_buffer(message) > 0)
					{
						std::cout << "\nClient: " << message.c_str();
						exit_flag = Commander::execute(message, answer);
						std::cout << "\nServer: " << answer.c_str();
						client->send_buffer(answer);
					}
					else
					{
						exit_flag = true;
					}
				} while(!exit_flag);

				delete client;
			}
		}
		delete server;
	}

	perror("\nExit");
}

void SystemTool::local_commander(void)
{
	std::string cmd;
	std::string answer;
	bool exit_flag;

	std::cout << "\nWaiting for command ...\n";

	do
	{
		std::getline(std::cin, cmd);
		exit_flag = Commander::execute(cmd, answer);
		std::cout << answer;
	} while(!exit_flag);
}

void SystemTool::device_scanning()
{
	unsigned int data;
    int kbhit = 0;

	Device::InstanceVector instances = Device::get_instanceVector();

	fputs("\e[?25l", stdout); /* hide the cursor */
	system("clear");
	std::cout << "___ Scanning devices. Press ENTER to stop ___";
	for(;kbhit == 0;)
	{
		for (unsigned i = 0; i < instances.size(); i ++)
		{
			instances[i]->read(&data);
			printf("%c[%d;%df %s = 0x%X         ", 0x1B, i + 2, 10,
				   instances[i]->get_name().c_str(), data);
		}
		ioctl(0, FIONREAD, &kbhit);
	}
	getchar();
	system("clear");
	fputs("\e[?25h", stdout); /* show the cursor */
}

void SystemTool::joystick_controller(void)
{
	DeviceHandler handler("/dev/input/by-id/usb-Microntek_USB_Joystick-event-joystick");
	js_event je;
	for (;;)
	{
		handler.read(&je, sizeof(je));
		std::cout << "Number: " << je.number << std::endl;
		std::cout << "Time: " << je.time << std::endl;
		std::cout << "Type: " << je.type << std::endl;
		std::cout << "Value: " << je.value << std::endl;
	}
}

int SystemTool::run(void)
{
	int tcp_port = 0;
	char op;

	system("clear");

	if (passed_arg() >= 2)
	{
		op = passed_arg(1)[0];

		if (passed_arg() > 2)
		{
			tcp_port = strtoul(passed_arg(2).c_str(), NULL, 0);
		}
	}
	else
	{
		std::cout << "\n***** Local SysTool *****";
		std::cout << "\n\nOptions:";
		std::cout << "\n 1   - Server commander";
		std::cout << "\n 2   - Local commander";
		std::cout << "\n 3   - Device scanning";
		std::cout << "\n 4   - Joystick controller";
		std::cout << "\n XXX - Exit";
		std::cout << "\n\nSelect: ";

		op = std::cin.get();
	}

	switch(op)
	{
	case '1':
		if (tcp_port == 0)
		{
			std::cout << "\nTCP/IP port number: ";
			std::cin >> tcp_port;
		}
		remote_commander(tcp_port);
		break;
	case '2':
		local_commander();
		break;
	case '3':
		device_scanning();
		break;
	case '4':
		joystick_controller();
		break;
	default:;
	}

    return EXIT_SUCCESS;
}

SystemTool::~SystemTool()
{
}
